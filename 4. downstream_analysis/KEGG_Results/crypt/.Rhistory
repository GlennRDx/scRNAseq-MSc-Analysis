} else {
stop("Invalid type. Use 'GO' or 'KEGG'.")
}
return(genes)
}
# Define the function to process a list of data frames
process_df_list <- function(df_list, kegg_pathway, pval_threshold = 0.05) {
# Initialize empty data frames for p-values and logFC values
pval_df <- data.frame()
logFC_df <- data.frame()
for (i in seq_along(df_list)) {
df_name <- names(df_list)[i]
data <- df_list[[i]]
# Generate the pathway report for the current data frame
intersecting_genes <- pathway_report(data, kegg_pathway, pval_threshold)
# Create temporary data frames for p-values and logFC values
temp_pval_df <- data.frame(gene = intersecting_genes$symbol, p.val = intersecting_genes$p.val)
temp_logFC_df <- data.frame(gene = intersecting_genes$symbol, logFC = intersecting_genes$logFC)
# Rename the columns to reflect the current data frame
colnames(temp_pval_df)[2] <- df_name
colnames(temp_logFC_df)[2] <- df_name
# Merge the temporary data frames with the main data frames
if (nrow(pval_df) == 0) {
pval_df <- temp_pval_df
logFC_df <- temp_logFC_df
} else {
pval_df <- merge(pval_df, temp_pval_df, by = "gene", all = TRUE)
logFC_df <- merge(logFC_df, temp_logFC_df, by = "gene", all = TRUE)
}
}
return(list(pval_df = pval_df, logFC_df = logFC_df))
}
# Define the function to count number of KEGG pathways associated with mmu genes
count_kegg_pathways <- function(gene_symbol) {
# Convert the gene symbol to an Entrez gene ID
entrez_id <- mapIds(org.Mm.eg.db, keys = gene_symbol, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
if (is.na(entrez_id)) {
stop("Gene symbol not found in Entrez database.")
}
# Create the KEGG gene identifier
kegg_gene_id <- paste0("mmu:", entrez_id)
# Retrieve the KEGG pathways for the gene
pathways <- keggLink("pathway", kegg_gene_id)
# Count the number of unique pathways
num_pathways <- length(unique(pathways))
return(num_pathways)
}
process_files <- function(input_directory, output_directory, p_val = 0.05, lfc = 0.1, export_pathway_files = TRUE, cats) {
# List all CSV files in the input directory
file_list <- list.files(path = input_directory, pattern = "\\.csv$", full.names = TRUE)
# Loop over each file in the file list
for (file_path in file_list) {
# Extract the file name and cell type
file_name <- basename(file_path)
parts <- strsplit(file_name, "_")[[1]]
cell_type <- paste(parts[6:length(parts)], collapse = "_")
cell_type <- sub("\\.csv$", "", cell_type) # Remove file extension '.csv'
cell_type <- gsub("_", " ", cell_type) # Replace underscores with spaces
print(file_name)
print(cell_type)
# Read the CSV file into a data frame
df <- read.csv(file_path)
# Run the analyze_pathways function
setwd(output_directory)
analyze_pathways(df, cell_type = cell_type, p_val = p_val, lfc = lfc, export_pathway_files = export_pathway_files, cats = cats)
}
}
########################## Pathway report function #############################
# Reports pathway metrics from a given deg file
pathway_report <- function(data, kegg_pathway, pval_threshold = 0.05) {
# Load necessary libraries
library(dplyr)
library(ggplot2)  # Library for plotting
# Ensure that the required columns are present in the data
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(data))) {
stop("The data must contain 'X', 'adj.P.Val', and 'abs.log2FC' columns.")
}
# Get the list of genes for the given KEGG pathway
gene_list <- get_gene_list(kegg_pathway, "KEGG")
# Ensure that the SYMBOL column is present in the gene_list
if (!"SYMBOL" %in% colnames(gene_list)) {
stop("The gene list must contain a 'SYMBOL' column.")
}
# Extract the gene symbols from the gene_list
kegg_genes <- gene_list$SYMBOL
# Find the intersecting genes
intersecting_genes <- data %>%
filter(X %in% kegg_genes) %>%
select(symbol = X, p.val = adj.P.Val, logFC = abs.log2FC) %>%
arrange(p.val)
# Calculate the number of significant genes
significant_genes <- intersecting_genes %>%
filter(p.val < pval_threshold)
# Calculate the gene ratio
total_intersecting <- nrow(intersecting_genes)
total_significant <- nrow(significant_genes)
gene_ratio_decimal <- if (total_intersecting > 0) {
total_significant / total_intersecting
} else {
NA  # Avoid division by zero
}
gene_ratio_fraction <- if (!is.na(gene_ratio_decimal) && total_intersecting > 0) {
paste(total_significant, total_intersecting, sep = "/")
} else {
NA  # Avoid division by zero
}
# Calculate the average logFC of the significant genes
avg_logFC <- if (total_significant > 0) {
mean(significant_genes$logFC, na.rm = TRUE)
} else {
NA  # If no significant genes, average is NA
}
# Create a distribution plot of the logFC for significant genes
if (total_significant > 0) {
p <- ggplot(significant_genes, aes(x = logFC)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of logFC for Significant Genes",
x = "logFC",
y = "Count") +
theme_minimal()
print(p)  # Print the plot to the RStudio Plots pane
}
# Return results as a list
return(list(
intersecting_genes = intersecting_genes,
gene_ratio_decimal = gene_ratio_decimal,
gene_ratio_fraction = gene_ratio_fraction,
avg_logFC = avg_logFC
))
}
# Look at KEGG pathway graph of specific pathway
specific_pathway_analysis = function(df, pid, output_directory = '/home/', p_val = 0.05){
owd = getwd()
setwd(output_directory)
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
pathview(gene.data = foldchanges,
pathway.id = pid,
species = 'mmu',
expand.node = T,
kegg.native = T,
low = list(gene = "red"),
mid =list(gene = "gray"),
high = list(gene = "green"))
setwd(owd)
}
specific_pathway_analysis(spy_ent, pid = 'mmu04540', p_val = 0.05)
# Test all datasets in folder
crypt_path = '/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/3. upstream_analysis/crypt/differential_expression_scanpy/'
# villi_path = '/home/glennrdx/Documents/Research_Project/RNA-seq_Analysis/python/villi/differential_expression'
# pseudo_path = '/home/glennrdx/Documents/Research_Project/RNA-seq_Analysis/python/crypt_pb/differential_expression'
crp_out_path = '/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt'
# Process all DGE tables - Ridgeplots + KEGG Graphs
process_files(input_directory = crypt_path, output_directory = crp_out_path, p_val = 0.05, lfc = 0, export_pathway_files = T, cats = cats)
pathway_heatmap <- function(df_list,
pid = NULL,
scale_to_one = FALSE,
remove_na_rows = FALSE,
order_by_sum = TRUE,
custom_gene_list = NULL,
output_dir = ".",
file_name = "heatmap.jpg") {
pathway_name = get_kegg_pathway_name(pid)
# Step 1: Determine the gene list
if (!is.null(custom_gene_list)) {
gene_list <- unique(custom_gene_list)
} else if (!is.null(pid)) {
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
} else {
stop("Either 'pid' or 'custom_gene_list' must be provided.")
}
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
# Extract the last 3 characters of each dataframe name and convert to uppercase
colnames(p_val) <- toupper(substr(names(df_list), nchar(names(df_list)) - 2, nchar(names(df_list))))
colnames(logFC) <- colnames(p_val)
n_genes = length(gene_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
# Set logFC to NaN if p-value is not significant
if (df$adj.P.Val[gene_idx] < 0.05) {
logFC[gene, i] <- df$abs.log2FC[gene_idx]
} else {
logFC[gene, i] <- NaN
}
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(logFC, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
n_omitted = sum(!non_na_rows)
# Calculate the percentage of the pathway that has been omitted
percentage_omitted = round((n_omitted / n_genes) * 100, 3)
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
n_omitted = sum(na_rows)  # Omitted rows are those moved to the end
percentage_omitted = 0
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Optionally sort the rows by the sum of significant logFC values
if (order_by_sum) {
significance_threshold <- 0.05  # Adjust this threshold if necessary
significant_logFC <- logFC_clean
significant_logFC[p_val_clean >= significance_threshold] <- 0  # Zero out non-significant logFC values
logFC_sums <- rowSums(significant_logFC, na.rm = TRUE)
# Order the rows by the sum of significant logFC values
logFC_clean <- logFC_clean[order(logFC_sums, decreasing = TRUE), ]
p_val_clean <- p_val_clean[rownames(logFC_clean), ]  # Ensure p_val matches the new order
}
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
title_text <- if (remove_na_rows) {
paste0(pathway_name, "\nHeatmap of logFC ", if (!is.null(pid)) pid else "Custom Genes", ' - ', n_omitted, " genes omitted (", percentage_omitted, "%)")
} else {
paste0(pathway_name, "\nHeatmap of logFC ", if (!is.null(pid)) pid else "Custom Genes")
}
# Ensure output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Define the file path
file_path <- file.path(output_dir, file_name)
# Open a JPEG device
png(filename = file_path, width = 1500, height = 2200, res = 200)
# Plot the heatmap
pheatmap(logFC_clean,
main = title_text,
cluster_rows = !order_by_sum,  # Cluster rows if not ordering by sum
cluster_cols = FALSE,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 10,
labels_col = colnames(logFC_clean))  # Use the modified column names
# Close the JPEG device
dev.off()
message("Heatmap saved to ", file_path)
}
# Example usage with KEGG pathway
pathway_heatmap(dsq_isc,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(dsq_isc,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(lma_isc,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(spy_isc,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(df_isc,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(spy_list,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(spy_list,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis/",
file_name = "heatmap.png")
# Example usage with KEGG pathway
pathway_heatmap(spy_list,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis",
file_name = "heatmap.png")
pathway_heatmap <- function(df_list,
pid = NULL,
scale_to_one = FALSE,
remove_na_rows = FALSE,
order_by_sum = TRUE,
custom_gene_list = NULL,
output_dir = ".",
file_name = "heatmap.jpg") {
pathway_name = get_kegg_pathway_name(pid)
# Step 1: Determine the gene list
if (!is.null(custom_gene_list)) {
gene_list <- unique(custom_gene_list)
} else if (!is.null(pid)) {
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
} else {
stop("Either 'pid' or 'custom_gene_list' must be provided.")
}
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
# Extract the last 3 characters of each dataframe name and convert to uppercase
colnames(p_val) <- toupper(substr(names(df_list), nchar(names(df_list)) - 2, nchar(names(df_list))))
colnames(logFC) <- colnames(p_val)
n_genes = length(gene_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
# Set logFC to NaN if p-value is not significant
if (df$adj.P.Val[gene_idx] < 0.05) {
logFC[gene, i] <- df$abs.log2FC[gene_idx]
} else {
logFC[gene, i] <- NaN
}
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(logFC, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
n_omitted = sum(!non_na_rows)
# Calculate the percentage of the pathway that has been omitted
percentage_omitted = round((n_omitted / n_genes) * 100, 3)
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
n_omitted = sum(na_rows)  # Omitted rows are those moved to the end
percentage_omitted = 0
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Optionally sort the rows by the sum of significant logFC values
if (order_by_sum) {
significance_threshold <- 0.05  # Adjust this threshold if necessary
significant_logFC <- logFC_clean
significant_logFC[p_val_clean >= significance_threshold] <- 0  # Zero out non-significant logFC values
logFC_sums <- rowSums(significant_logFC, na.rm = TRUE)
# Order the rows by the sum of significant logFC values
logFC_clean <- logFC_clean[order(logFC_sums, decreasing = TRUE), ]
p_val_clean <- p_val_clean[rownames(logFC_clean), ]  # Ensure p_val matches the new order
}
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
title_text <- if (remove_na_rows) {
paste0(pathway_name, "\nHeatmap of logFC ", if (!is.null(pid)) pid else "Custom Genes", ' - ', n_omitted, " genes omitted (", percentage_omitted, "%)")
} else {
paste0(pathway_name, "\nHeatmap of logFC ", if (!is.null(pid)) pid else "Custom Genes")
}
# Ensure output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Define the file path
file_path <- file.path(output_dir, file_name)
# Open a JPEG device
png(filename = file_path, width = 1500, height = 2200, res = 200)
# Plot the heatmap
pheatmap(logFC_clean,
main = title_text,
cluster_rows = !order_by_sum,  # Cluster rows if not ordering by sum
cluster_cols = FALSE,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 10,
labels_col = colnames(logFC_clean))  # Use the modified column names
# Close the JPEG device
dev.off()
message("Heatmap saved to ", file_path)
}
# # # Example usage with a custom gene list
# genes <- unique(unlist(lapply(df_list, function(df) df$X)))
# hsp_genes <- genes[grepl("^hsp", genes, ignore.case = TRUE)]
# Example usage with KEGG pathway
pathway_heatmap(spy_list,
pid = 'mmu04530',
scale_to_one = TRUE,
remove_na_rows = TRUE,
order_by_sum = TRUE,
output_dir = "/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/4. downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis",
file_name = "heatmap.png")
# pathway_heatmap(df_list, custom_gene_list = hsp_genes, scale_to_one = T, remove_na_rows = T, order_by_sum = T)
