# Look at KEGG pathway graph of specific pathway
specific_pathway_analysis = function(df, pid, p_val = 0.05){
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
pathview(gene.data = foldchanges,
pathway.id = pid,
species = 'mmu',
expand.node = T,
kegg.native = T,
low = list(gene = "red"),
mid =list(gene = "gray"),
high = list(gene = "green"))
}
specific_pathway_analysis(df_ent, pid = 'mmu04621', p_val = 0.05)
getwd()
# Example usage
pathway_heatmap(df_list, 'mmu04930', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_ent, pid = 'mmu04930', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu04930', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu04930', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04950', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04910', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_enp, pid = 'mmu04930', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu04910', p_val = 0.05)
library(aPEAR)
library(org.Mm.eg.db)
library(enrichplot)
library(clusterProfiler)
library(ggplot2)
library(stringr)
perform_GO_enrichment <- function(df, ONTOLOGY = NULL, orgdb = org.Mm.eg.db, showCategory = 50, nPermSimple = 10000) {
set.seed(1)
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(orgdb, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Remove duplicates
df <- df[!duplicated(entrez_ids[df$X]), ]
entrez_ids <- entrez_ids[!duplicated(entrez_ids)]
# Create a named vector of logFC values
geneList <- df$logFC
names(geneList) <- entrez_ids[df$X]
geneList <- na.omit(geneList)
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA
set.seed(1)
enrich <- gseGO(geneList = geneList, OrgDb = orgdb, ont = ONTOLOGY, eps = 0, nPermSimple = nPermSimple)
# Extract the top 50 GO terms by p-value
top50_go_terms <- head(enrich@result[order(enrich@result$pvalue), ], 50)
# Print the top 50 GO terms
print(top50_go_terms)
# Assign dotplot to an object
print('Creating dotplot...')
enrich_dotplot <- enrichplot::dotplot(enrich, showCategory = showCategory, split = ".sign") +
facet_grid(. ~ .sign) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) +
scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 100))
print(enrich_dotplot)
print('Creating enrichment map')
set.seed(1)
settings = aPEAR.methods
settings$minClusterSize = 3
enrichnet = enrichmentNetwork(enrich@result,
drawEllipses = TRUE,
repelLabels = T,
outerCutoff = 0.6, # 0.5 Decreasing this value results in greater connectivity between the nodes in different clusters
innerCutoff = 0.005, # 0.1 Decreasing this value results in greater connectivity within the nodes in the same cluster.
fontSize = 4,
)
print(enrichnet)
return(list(enrich = enrich, enrichnet = enrichnet))
}
enrichnet = perform_GO_enrichment(df = df_enp, ONTOLOGY = 'BP')
perform_GO_enrichment <- function(df, ONTOLOGY = NULL, orgdb = org.Mm.eg.db, showCategory = 50, nPermSimple = 10000) {
set.seed(1)
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(orgdb, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Remove duplicates
df <- df[!duplicated(entrez_ids[df$X]), ]
entrez_ids <- entrez_ids[!duplicated(entrez_ids)]
# Create a named vector of logFC values
geneList <- df$logFC
names(geneList) <- entrez_ids[df$X]
geneList <- na.omit(geneList)
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA
set.seed(1)
enrich <- gseKEGG(geneList = geneList, OrgDb = orgdb)
# Extract the top 50 GO terms by p-value
top50_go_terms <- head(enrich@result[order(enrich@result$pvalue), ], 50)
# Print the top 50 GO terms
print(top50_go_terms)
# Assign dotplot to an object
print('Creating dotplot...')
enrich_dotplot <- enrichplot::dotplot(enrich, showCategory = showCategory, split = ".sign") +
facet_grid(. ~ .sign) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) +
scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 100))
print(enrich_dotplot)
print('Creating enrichment map')
set.seed(1)
settings = aPEAR.methods
settings$minClusterSize = 3
enrichnet = enrichmentNetwork(enrich@result,
drawEllipses = TRUE,
repelLabels = T,
outerCutoff = 0.6, # 0.5 Decreasing this value results in greater connectivity between the nodes in different clusters
innerCutoff = 0.005, # 0.1 Decreasing this value results in greater connectivity within the nodes in the same cluster.
fontSize = 4,
)
print(enrichnet)
return(list(enrich = enrich, enrichnet = enrichnet))
}
enrichnet = perform_GO_enrichment(df = df_enp)
library(aPEAR)
library(org.Mm.eg.db)
library(enrichplot)
library(clusterProfiler)
library(ggplot2)
library(stringr)
perform_KEGG_enrichment <- function(df, organism = 'mmu', orgdb = org.Mm.eg.db, showCategory = 50, nPermSimple = 10000) {
set.seed(1)
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(orgdb, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Remove duplicates
df <- df[!duplicated(entrez_ids[df$X]), ]
entrez_ids <- entrez_ids[!duplicated(entrez_ids)]
# Create a named vector of logFC values
geneList <- df$logFC
names(geneList) <- entrez_ids[df$X]
geneList <- na.omit(geneList)
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA for KEGG pathways
set.seed(1)
enrich <- gseKEGG(geneList = geneList, organism = organism, eps = 0, nPermSimple = nPermSimple)
# Extract the top 50 KEGG pathways by p-value
top50_kegg_terms <- head(enrich@result[order(enrich@result$pvalue), ], 50)
# Print the top 50 KEGG pathways
print(top50_kegg_terms)
# Assign dotplot to an object
print('Creating dotplot...')
enrich_dotplot <- enrichplot::dotplot(enrich, showCategory = showCategory, split = ".sign") +
facet_grid(. ~ .sign) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) +
scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 100))
print(enrich_dotplot)
print('Creating enrichment map...')
set.seed(1)
settings = aPEAR.methods
settings$minClusterSize = 3
enrichnet = enrichmentNetwork(enrich@result,
drawEllipses = TRUE,
repelLabels = TRUE,
outerCutoff = 0.6,
innerCutoff = 0.005,
fontSize = 4)
print(enrichnet)
return(list(enrich = enrich, enrichnet = enrichnet))
}
# Example usage
enrichnet = perform_KEGG_enrichment(df = df_enp)
library(aPEAR)
library(org.Mm.eg.db)
library(enrichplot)
library(clusterProfiler)
library(ggplot2)
library(stringr)
perform_KEGG_enrichment <- function(df, organism = 'mmu', orgdb = org.Mm.eg.db, showCategory = 50, nPermSimple = 10000) {
set.seed(1)
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(orgdb, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Remove duplicates
df <- df[!duplicated(entrez_ids[df$X]), ]
entrez_ids <- entrez_ids[!duplicated(entrez_ids)]
# Create a named vector of logFC values
geneList <- df$logFC
names(geneList) <- entrez_ids[df$X]
geneList <- na.omit(geneList)
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA for KEGG pathways
set.seed(1)
enrich <- gseKEGG(geneList = geneList, organism = organism, eps = 0, nPermSimple = nPermSimple)
# Extract the top 50 KEGG pathways by p-value
top50_kegg_terms <- head(enrich@result[order(enrich@result$pvalue), ], 50)
# Print the top 50 KEGG pathways
print(top50_kegg_terms)
# Assign dotplot to an object
print('Creating dotplot...')
enrich_dotplot <- enrichplot::dotplot(enrich, showCategory = showCategory, split = ".sign") +
facet_grid(. ~ .sign) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) +
scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 100))
print(enrich_dotplot)
print('Creating enrichment map...')
set.seed(1)
settings <- aPEAR.methods
settings$minClusterSize <- 3
enrichnet <- enrichmentNetwork(
enrich@result,
drawEllipses = TRUE,
repelLabels = TRUE,
showAllLabels = TRUE,   # Show all labels
outerCutoff = 0.6,
innerCutoff = 0.005,
fontSize = 4
)
print(enrichnet)
return(list(enrich = enrich, enrichnet = enrichnet))
}
# Example usage
enrichnet = perform_KEGG_enrichment(df = df_enp)
library(aPEAR)
library(org.Mm.eg.db)
library(enrichplot)
library(clusterProfiler)
library(ggplot2)
library(stringr)
perform_KEGG_enrichment <- function(df, organism = 'mmu', orgdb = org.Mm.eg.db, showCategory = 50, nPermSimple = 10000) {
set.seed(1)
# Convert gene symbols to Entrez IDs
entrez_ids <- mapIds(orgdb, keys = df$X, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
entrez_ids <- na.omit(entrez_ids)
# Remove duplicates
df <- df[!duplicated(entrez_ids[df$X]), ]
entrez_ids <- entrez_ids[!duplicated(entrez_ids)]
# Create a named vector of logFC values
geneList <- df$logFC
names(geneList) <- entrez_ids[df$X]
geneList <- na.omit(geneList)
# Sort geneList in decreasing order
geneList <- sort(geneList, decreasing = TRUE)
# Perform GSEA for KEGG pathways
set.seed(1)
enrich <- gseKEGG(geneList = geneList, organism = organism, eps = 0, nPermSimple = nPermSimple)
# Extract the top 50 KEGG pathways by p-value
top50_kegg_terms <- head(enrich@result[order(enrich@result$pvalue), ], 50)
# Print the top 50 KEGG pathways
print(top50_kegg_terms)
# Assign dotplot to an object
print('Creating dotplot...')
enrich_dotplot <- enrichplot::dotplot(enrich, showCategory = showCategory, split = ".sign") +
facet_grid(. ~ .sign) +
theme(axis.text.y = element_text(size = 8),
plot.title = element_text(size = 14),
legend.text = element_text(size = 10),
legend.title = element_text(size = 10),
axis.title.x = element_text(size = 10),
axis.title.y = element_text(size = 10)) +
scale_y_discrete(labels = function(x) stringr::str_wrap(x, width = 100))
print(enrich_dotplot)
print('Creating enrichment map...')
set.seed(1)
settings <- aPEAR.methods
settings$minClusterSize <- 3
settings$outerCutoff <- 0.7  # Adjusted for better label visibility
settings$innerCutoff <- 0.01 # Adjusted for better label visibility
enrichnet <- enrichmentNetwork(
enrich@result,
drawEllipses = TRUE,
repelLabels = TRUE,
outerCutoff = settings$outerCutoff,
innerCutoff = settings$innerCutoff,
fontSize = 4
)
# Force all labels to display by ensuring sufficient spacing
print(enrichnet)
return(list(enrich = enrich, enrichnet = enrichnet))
}
# Example usage
enrichnet = perform_KEGG_enrichment(df = df_enp)
pathway_heatmap <- function(df_list, pid, scale_to_one = F, remove_na_rows = F) {
# Step 1: Get the list of genes associated with the KEGG pathway
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
colnames(p_val) <- names(df_list)
colnames(logFC) <- names(df_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
logFC[gene, i] <- df$abs.log2FC[gene_idx]
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(p_val, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
pheatmap(logFC_clean,
main = paste0("Heatmap of logFC ", pid, ' ', get_kegg_pathway_name(pid)),
cluster_rows = T,
cluster_cols = F,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 5)
}
# Example usage
pathway_heatmap(df_list, 'mmu03013', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_enp, pid = 'mmu03013', p_val = 0.05)
# Look at KEGG pathway graph of specific pathway
specific_pathway_analysis = function(df, pid, p_val = 0.05){
owd = getwd()
setwd("/home/glennrdx/Documents/Research_Project/RNA-seq_Analysis/r_studio/KEGG_Results/crypt/Individual_Pathway_Analysis")
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
pathview(gene.data = foldchanges,
pathway.id = pid,
species = 'mmu',
expand.node = T,
kegg.native = T,
low = list(gene = "red"),
mid =list(gene = "gray"),
high = list(gene = "green"))
setwd(owd)
}
specific_pathway_analysis(df_enp, pid = 'mmu03013', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04932', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_enp, pid = 'mmu04932', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu00190', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu00190', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_ent, pid = 'mmu00190', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu00190', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04110', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu04110', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04340', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04672', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04216', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_enp, pid = 'mmu04216', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04216', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04630', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04630', scale_to_one = T, remove_na_rows = T)
specific_pathway_analysis(df_enp, pid = 'mmu04630', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu04010', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04010', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04010', scale_to_one = T, remove_na_rows = T)
# Example usage
pathway_heatmap(df_list, 'mmu04010', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu04010', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04530', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_enp, pid = 'mmu04530', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04530', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu04530', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04010', p_val = 0.05)
specific_pathway_analysis(df_tuf, pid = 'mmu04010', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu00010', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu00010', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu00010', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu00010', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04151', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_ent, pid = 'mmu04151', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu04151', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04621', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu04621', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04621', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04621', scale_to_one = T, remove_na_rows = T)
# Example usage
pathway_heatmap(df_list, 'mmu04910', scale_to_one = T, remove_na_rows = T)
# Example usage
pathway_heatmap(df_list, 'mmu04910', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_ent, pid = 'mmu04910', p_val = 0.05)
specific_pathway_analysis(df_ISC, pid = 'mmu04910', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu04910', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04620', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu04620', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04620', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu00190', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu00190', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu00190', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu00190', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu03050', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_ent, pid = 'mmu03050', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu03050', p_val = 0.05)
specific_pathway_analysis(df_isc, pid = 'mmu03040', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu03040', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04141', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu04975', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu00071', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu03030', scale_to_one = T, remove_na_rows = F)
# Example usage
pathway_heatmap(df_list, 'mmu03320', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu03320', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu03320', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu03320', p_val = 0.05)
# Example usage
pathway_heatmap(df_list, 'mmu04110', scale_to_one = T, remove_na_rows = F)
specific_pathway_analysis(df_isc, pid = 'mmu04110', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu04110', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04110', p_val = 0.05)
