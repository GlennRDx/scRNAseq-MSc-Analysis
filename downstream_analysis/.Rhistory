setwd(output_directory)
analyze_pathways(df, cell_type = cell_type, p_val = p_val, lfc = lfc, export_pathway_files = export_pathway_files, cats = cats)
}
}
########################## Pathway report function #############################
# Reports pathway metrics from a given deg file
pathway_report <- function(data, kegg_pathway, pval_threshold = 0.05) {
# Load necessary libraries
library(dplyr)
library(ggplot2)  # Library for plotting
# Ensure that the required columns are present in the data
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(data))) {
stop("The data must contain 'X', 'adj.P.Val', and 'abs.log2FC' columns.")
}
# Get the list of genes for the given KEGG pathway
gene_list <- get_gene_list(kegg_pathway, "KEGG")
# Ensure that the SYMBOL column is present in the gene_list
if (!"SYMBOL" %in% colnames(gene_list)) {
stop("The gene list must contain a 'SYMBOL' column.")
}
# Extract the gene symbols from the gene_list
kegg_genes <- gene_list$SYMBOL
# Find the intersecting genes
intersecting_genes <- data %>%
filter(X %in% kegg_genes) %>%
select(symbol = X, p.val = adj.P.Val, logFC = abs.log2FC) %>%
arrange(p.val)
# Calculate the number of significant genes
significant_genes <- intersecting_genes %>%
filter(p.val < pval_threshold)
# Calculate the gene ratio
total_intersecting <- nrow(intersecting_genes)
total_significant <- nrow(significant_genes)
gene_ratio_decimal <- if (total_intersecting > 0) {
total_significant / total_intersecting
} else {
NA  # Avoid division by zero
}
gene_ratio_fraction <- if (!is.na(gene_ratio_decimal) && total_intersecting > 0) {
paste(total_significant, total_intersecting, sep = "/")
} else {
NA  # Avoid division by zero
}
# Calculate the average logFC of the significant genes
avg_logFC <- if (total_significant > 0) {
mean(significant_genes$logFC, na.rm = TRUE)
} else {
NA  # If no significant genes, average is NA
}
# Create a distribution plot of the logFC for significant genes
if (total_significant > 0) {
p <- ggplot(significant_genes, aes(x = logFC)) +
geom_histogram(binwidth = 0.05, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of logFC for Significant Genes",
x = "logFC",
y = "Count") +
theme_minimal()
print(p)  # Print the plot to the RStudio Plots pane
}
# Return results as a list
return(list(
intersecting_genes = intersecting_genes,
gene_ratio_decimal = gene_ratio_decimal,
gene_ratio_fraction = gene_ratio_fraction,
avg_logFC = avg_logFC
))
}
################################### Test Code ##################################
# Test all datasets in folder
crypt_path = '/home/glennrdx/Documents/Research_Project/RNA-seq_Analysis/python/crypt/differential_expression'
crp_out_path = '/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/downstream_analysis/KEGG_Results/crypt'
# Look at KEGG pathway graph of specific pathway
specific_pathway_analysis = function(df, pid, p_val = 0.05){
owd = getwd()
setwd("/home/glennrdx/Documents/Research_Project/scRNAseq-MSc-Analysis/downstream_analysis/KEGG_Results/crypt/Individual_Pathway_Analysis")
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
pathview(gene.data = foldchanges,
pathway.id = pid,
species = 'mmu',
expand.node = T,
kegg.native = T,
low = list(gene = "red"),
mid =list(gene = "gray"),
high = list(gene = "green"))
setwd(owd)
}
specific_pathway_analysis(df_ent, pid = 'mmu04110', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu03050', p_val = 0.05)
specific_pathway_analysis(df_enp, pid = 'mmu03050', p_val = 0.05)
pathway_heatmap <- function(df_list, pid, scale_to_one = F, remove_na_rows = F, order_by_sum = T) {
# Step 1: Get the list of genes associated with the KEGG pathway
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
colnames(p_val) <- names(df_list)
colnames(logFC) <- names(df_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
logFC[gene, i] <- df$abs.log2FC[gene_idx]
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(p_val, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Optionally sort the rows by the sum of significant logFC values
if (order_by_sum) {
significance_threshold <- 0.05  # Adjust this threshold if necessary
significant_logFC <- logFC_clean
significant_logFC[p_val_clean >= significance_threshold] <- 0  # Zero out non-significant logFC values
logFC_sums <- rowSums(significant_logFC, na.rm = TRUE)
# Order the rows by the sum of significant logFC values
logFC_clean <- logFC_clean[order(logFC_sums, decreasing = TRUE), ]
p_val_clean <- p_val_clean[rownames(logFC_clean), ]  # Ensure p_val matches the new order
}
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
pheatmap(logFC_clean,
main = paste0("Heatmap of logFC ", pid, ' ', get_kegg_pathway_name(pid)),
cluster_rows = !order_by_sum,  # Cluster rows if not ordering by sum
cluster_cols = F,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 10)
}
# Example usage
pathway_heatmap(df_list, 'mmu03040', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
df_list = list(df_isc = df_isc,
df_ent = df_ent,
df_gob = df_gob,
df_tuf = df_tuf,
df_eec = df_eec)
# Example usage
pathway_heatmap(df_list, 'mmu03040', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
library(pheatmap)
# Example usage
pathway_heatmap(df_list, 'mmu03040', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
# Example usage
pathway_heatmap(df_list, 'mmu03320', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
specific_pathway_analysis(df_enp, pid = 'mmu03320', p_val = 0.05)
# Extract the 'X' column from each dataframe in df_list and combine them
genes <- unique(unlist(lapply(df_list, function(df) df$X)))
# Subset the 'genes' list with genes starting with "hsp", case-insensitive
hsp_genes <- genes[grepl("^hsp", genes, ignore.case = TRUE)]
pathway_heatmap <- function(df_list, pid, scale_to_one = F, remove_na_rows = F, order_by_sum = T) {
# Step 1: Get the list of genes associated with the KEGG pathway
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
colnames(p_val) <- names(df_list)
colnames(logFC) <- names(df_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
logFC[gene, i] <- df$abs.log2FC[gene_idx]
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(p_val, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Optionally sort the rows by the sum of significant logFC values
if (order_by_sum) {
significance_threshold <- 0.05  # Adjust this threshold if necessary
significant_logFC <- logFC_clean
significant_logFC[p_val_clean >= significance_threshold] <- 0  # Zero out non-significant logFC values
logFC_sums <- rowSums(significant_logFC, na.rm = TRUE)
# Order the rows by the sum of significant logFC values
logFC_clean <- logFC_clean[order(logFC_sums, decreasing = TRUE), ]
p_val_clean <- p_val_clean[rownames(logFC_clean), ]  # Ensure p_val matches the new order
}
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
pheatmap(logFC_clean,
main = paste0("Heatmap of logFC ", pid, ' ', get_kegg_pathway_name(pid)),
cluster_rows = !order_by_sum,  # Cluster rows if not ordering by sum
cluster_cols = F,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 10)
}
# Example usage
pathway_heatmap(df_list, 'mmu04141', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
pathway_heatmap <- function(df_list, pid, scale_to_one = F, remove_na_rows = F, order_by_sum = T) {
# Step 1: Get the list of genes associated with the KEGG pathway
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
colnames(p_val) <- names(df_list)
colnames(logFC) <- names(df_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
logFC[gene, i] <- df$abs.log2FC[gene_idx]
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(p_val, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Optionally sort the rows by the sum of significant logFC values
if (order_by_sum) {
significance_threshold <- 0.05  # Adjust this threshold if necessary
significant_logFC <- logFC_clean
significant_logFC[p_val_clean >= significance_threshold] <- 0  # Zero out non-significant logFC values
logFC_sums <- rowSums(significant_logFC, na.rm = TRUE)
# Order the rows by the sum of significant logFC values
logFC_clean <- logFC_clean[order(logFC_sums, decreasing = TRUE), ]
p_val_clean <- p_val_clean[rownames(logFC_clean), ]  # Ensure p_val matches the new order
}
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
pheatmap(logFC_clean,
main = paste0("Heatmap of logFC ", pid, ' ', get_kegg_pathway_name(pid)),
cluster_rows = !order_by_sum,  # Cluster rows if not ordering by sum
cluster_cols = F,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 8)
}
# Example usage
pathway_heatmap(df_list, 'mmu04141', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
specific_pathway_analysis(df_enp, pid = 'mmu04141', p_val = 0.05)
pathway_heatmap <- function(df_list, pid = NULL, scale_to_one = F, remove_na_rows = F, order_by_sum = T, custom_gene_list = NULL) {
# Step 1: Determine the gene list
if (!is.null(custom_gene_list)) {
gene_list <- unique(custom_gene_list)
} else if (!is.null(pid)) {
gene_list <- unique(get_gene_list(pid, 'KEGG')$SYMBOL)
} else {
stop("Either 'pid' or 'custom_gene_list' must be provided.")
}
# Initialize empty tables with appropriate dimensions
p_val <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
logFC <- data.frame(matrix(ncol = length(df_list), nrow = length(gene_list)))
# Set row names and column names
rownames(p_val) <- gene_list
rownames(logFC) <- gene_list
colnames(p_val) <- names(df_list)
colnames(logFC) <- names(df_list)
# Step 2: Populate the tables using df$P.value and df$abs.log2FC
for (i in seq_along(df_list)) {
df <- df_list[[i]]
# Ensure the df has the required columns
if (!all(c("X", "adj.P.Val", "abs.log2FC") %in% colnames(df))) {
stop("Dataframe missing required columns.")
}
for (gene in gene_list) {
# Check if the gene exists in the current dataframe
if (gene %in% df$X) {
# Get the index of the gene
gene_idx <- which(df$X == gene)
# Populate p-value and logFC
p_val[gene, i] <- df$adj.P.Val[gene_idx]
logFC[gene, i] <- df$abs.log2FC[gene_idx]
}
}
}
# Conditionally remove rows that are entirely NAs
if (remove_na_rows) {
non_na_rows <- apply(p_val, 1, function(row) !all(is.na(row)))
p_val <- p_val[non_na_rows, ]
logFC <- logFC[non_na_rows, ]
} else {
# Move rows in p_val that are entirely NAs to the end
na_rows <- apply(p_val, 1, function(row) all(is.na(row)))
p_val <- rbind(p_val[!na_rows, ], p_val[na_rows, ])
logFC <- logFC[rownames(p_val), ]  # Ensure the order of logFC matches p_val
}
p_val_clean <- p_val
p_val_clean[is.na(p_val_clean)] <- 1  # Assuming 1 is a non-significant p-value
logFC_clean <- logFC
logFC_clean[is.na(logFC_clean)] <- 0  # Assuming 0 is a reasonable substitute for missing logFC
# Optionally sort the rows by the sum of significant logFC values
if (order_by_sum) {
significance_threshold <- 0.05  # Adjust this threshold if necessary
significant_logFC <- logFC_clean
significant_logFC[p_val_clean >= significance_threshold] <- 0  # Zero out non-significant logFC values
logFC_sums <- rowSums(significant_logFC, na.rm = TRUE)
# Order the rows by the sum of significant logFC values
logFC_clean <- logFC_clean[order(logFC_sums, decreasing = TRUE), ]
p_val_clean <- p_val_clean[rownames(logFC_clean), ]  # Ensure p_val matches the new order
}
# Determine the color scale range and create custom breaks
if (scale_to_one) {
max_abs_logFC <- max(abs(logFC_clean), na.rm = TRUE)
color_limits <- c(-1, 1)
if (max_abs_logFC > 1) {
color_limits <- c(-max_abs_logFC, max_abs_logFC)
}
} else {
color_limits <- c(-max(abs(logFC_clean), na.rm = TRUE), max(abs(logFC_clean), na.rm = TRUE))
}
breaks <- seq(color_limits[1], color_limits[2], length.out = 101)
color_palette <- colorRampPalette(c("red", "white", "green"))(100)
# Function to convert p-values to significance symbols
pval_to_significance <- function(p) {
if (p < 0.0001) {
return("****")
} else if (p < 0.001) {
return("***")
} else if (p < 0.01) {
return("**")
} else if (p < 0.05) {
return("*")
} else {
return("")
}
}
# Apply the function to the p-value table
significance_symbols <- apply(p_val_clean, c(1, 2), pval_to_significance)
# Generate the heatmap with significance annotations
pheatmap(logFC_clean,
main = paste0("Heatmap of logFC ", if (!is.null(pid)) pid else "Custom Genes"),
cluster_rows = !order_by_sum,  # Cluster rows if not ordering by sum
cluster_cols = F,
display_numbers = significance_symbols,
color = color_palette,
breaks = breaks,
border_color = NA,
fontsize = 10)
}
# Example usage with a custom gene list
genes <- unique(unlist(lapply(df_list, function(df) df$X)))
hsp_genes <- genes[grepl("^hsp", genes, ignore.case = TRUE)]
pathway_heatmap(df_list, custom_gene_list = hsp_genes, scale_to_one = T, remove_na_rows = T, order_by_sum = T)
# Example usage with KEGG pathway
pathway_heatmap(df_list, pid = 'mmu04976', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
specific_pathway_analysis(df_ent, pid = 'mmu04976', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04976', p_val = 0.05)
specific_pathway_analysis(df_ent, pid = 'mmu04976', p_val = 0.05)
# Example usage with KEGG pathway
pathway_heatmap(df_list, pid = 'mmu04140', scale_to_one = T, remove_na_rows = T, order_by_sum = T)
specific_pathway_analysis(df_isc, pid = 'mmu04140', p_val = 0.05)
