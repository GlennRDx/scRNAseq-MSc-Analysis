scale_y_discrete(expand = c(0.01, 0))
print(ridge_plot)
} else {
cat("No data available for ridge plots.\n")
}
return(list(upregulated = upregulated_pathways, downregulated = downregulated_pathways, intersected = intersected_pathways))
}
results <- analyze_pathways(df = df_eec, cell_type = 'EEC', p_val = 0.05, export_pathway_files = FALSE, cats = cats)
analyze_pathways <- function(df, cell_type = 'Cell_Type', p_val = 0.05, export_pathway_files = TRUE, cats) {
original_wd <- getwd()
# Subset only the significantly DEGs
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
# Perform GO enrichment analysis
data("go.sets.mm")
data("go.subs.mm")
gobpsets <- go.sets.mm[go.subs.mm$BP]
gobpres <- gage(exprs = foldchanges, gsets = gobpsets, same.dir = TRUE)
# Perform KEGG pathway analysis
data("kegg.sets.mm")
data("sigmet.idx.mm")
kegg.sets.mm <- kegg.sets.mm[sigmet.idx.mm]
keggres <- gage(exprs = foldchanges, gsets = kegg.sets.mm, same.dir = TRUE)
# Extract and process upregulated KEGG pathways
upregulated_pathways <- data.frame(id = rownames(keggres$greater), keggres$greater) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
upregulated_pathway_ids <- substr(upregulated_pathways, start = 1, stop = 8)
# Extract and process downregulated KEGG pathways
downregulated_pathways <- data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
downregulated_pathway_ids <- substr(downregulated_pathways, start = 1, stop = 8)
# Find intersection of upregulated and downregulated pathways
intersected_pathways <- intersect(upregulated_pathway_ids, downregulated_pathway_ids)
if (length(intersected_pathways) > 0) {
cat("Intersection of upregulated and downregulated pathways:\n")
cat(paste(intersected_pathways, collapse = ", "), "\n")
} else {
cat("No intersection between upregulated and downregulated pathways.\n")
}
# Create timestamp for result folder
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
result_folder <- paste0("KEGG_Results_", timestamp)
dir.create(result_folder)  # Create main result folder
# Function to export pathway files individually
export_pathways <- function(pathway_ids, fullnames, pathway_direction) {
pathway_folder <- file.path(result_folder, paste0("KEGG_", cell_type, pathway_direction)) # creates main folder
dir.create(pathway_folder)  # Create subfolder (increased OR decreased)
setwd(pathway_folder)
# Perform pathview and export each pathway
for (pid in pathway_ids) {
full_pathway_name <- fullnames[which(substr(fullnames, 1, 8) == pid)]
print(full_pathway_name)
tryCatch({
dir.create(full_pathway_name)
setwd(full_pathway_name)
pathview(gene.data = foldchanges, pathway.id = pid, species = 'mmu')
},
error = function(e) {
cat(paste("Error for pathway", full_pathway_name, ":", e$message, "\n"))
})
setwd("..")
}
}
if (export_pathway_files == TRUE) {
# Export downregulated pathways
setwd(original_wd)
print(downregulated_pathway_ids)
export_pathways(downregulated_pathway_ids, downregulated_pathways, "_Decreased")
# Export upregulated pathways
setwd(original_wd)
print(upregulated_pathway_ids)
export_pathways(upregulated_pathway_ids, upregulated_pathways, "_Increased")
}
# Prepare data for ridge plots
ridge_data <- function(pathway_ids, pathway_direction, cats) {
ridge_df <- data.frame()
for (pid in pathway_ids) {
genes_in_pathway <- get_gene_list(pid, 'KEGG')
log2fc_values <- foldchanges[names(foldchanges) %in% genes_in_pathway$ENTREZID]
gene_ratio <- length(log2fc_values) / nrow(genes_in_pathway)  # Calculate gene ratio
if (length(log2fc_values) > 0) {  # Check if log2fc_values is not empty
pathway_category <- unique(cats[cats$Pathway == pid, "Major"])
if (length(pathway_category) == 0) {
pathway_category <- "Unknown"
}
pathway_name <- get_kegg_pathway_name(pid)
ridge_df <- rbind(ridge_df, data.frame(pathway = rep(paste0(pathway_name, " - ", pid, "_", pathway_direction), length(log2fc_values)),
log2fc = log2fc_values,
gene_ratio = rep(gene_ratio, length(log2fc_values)),
category = rep(pathway_category, length(log2fc_values))))
}
}
return(ridge_df)
}
ridge_df_up <- ridge_data(upregulated_pathway_ids, "Upregulated", cats)
ridge_df_down <- ridge_data(downregulated_pathway_ids, "Downregulated", cats)
ridge_df <- rbind(ridge_df_up, ridge_df_down)
# Plot ridge plots with binning
if (nrow(ridge_df) > 0) {
category_colors <- c("Metabolism" = "red", "Genetic Information Processing" = "blue",
"Environmental Information Processing" = "green", "Cellular Processes" = "purple",
"Organismal Systems" = "orange", "Human Diseases" = "brown", "Unknown" = "gray")
ridge_plot <- ggplot(ridge_df, aes(x = abs(log2fc), y = pathway, fill = gene_ratio)) +
geom_density_ridges(scale = 3, size = 1.2) +
scale_fill_viridis_c(name = "Gene Ratio", option = "C") +
theme_ridges(font_size = 13, grid = TRUE) +
theme(axis.text.y = element_text(size = 10, color = "black")) +
labs(title = paste("Ridge Plots for", cell_type, "Pathways"), x = "abs.log2FC", y = "Pathways") +
guides(fill = guide_colorbar(title = "Gene Ratio", barwidth = 1, barheight = 10, order = 1)) +
scale_y_discrete(expand = c(0.01, 0))
print(ridge_plot)
} else {
cat("No data available for ridge plots.\n")
}
return(list(upregulated = upregulated_pathways, downregulated = downregulated_pathways, intersected = intersected_pathways))
}
results <- analyze_pathways(df = df_eec, cell_type = 'EEC', p_val = 0.05, export_pathway_files = FALSE, cats = cats)
analyze_pathways <- function(df, cell_type = 'Cell_Type', p_val = 0.05, export_pathway_files = TRUE, cats) {
original_wd <- getwd()
# Subset only the significantly DEGs
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
# Perform GO enrichment analysis
data("go.sets.mm")
data("go.subs.mm")
gobpsets <- go.sets.mm[go.subs.mm$BP]
gobpres <- gage(exprs = foldchanges, gsets = gobpsets, same.dir = TRUE)
# Perform KEGG pathway analysis
data("kegg.sets.mm")
data("sigmet.idx.mm")
kegg.sets.mm <- kegg.sets.mm[sigmet.idx.mm]
keggres <- gage(exprs = foldchanges, gsets = kegg.sets.mm, same.dir = TRUE)
# Extract and process upregulated KEGG pathways
upregulated_pathways <- data.frame(id = rownames(keggres$greater), keggres$greater) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
upregulated_pathway_ids <- substr(upregulated_pathways, start = 1, stop = 8)
# Extract and process downregulated KEGG pathways
downregulated_pathways <- data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
downregulated_pathway_ids <- substr(downregulated_pathways, start = 1, stop = 8)
# Find intersection of upregulated and downregulated pathways
intersected_pathways <- intersect(upregulated_pathway_ids, downregulated_pathway_ids)
if (length(intersected_pathways) > 0) {
cat("Intersection of upregulated and downregulated pathways:\n")
cat(paste(intersected_pathways, collapse = ", "), "\n")
} else {
cat("No intersection between upregulated and downregulated pathways.\n")
}
# Create timestamp for result folder
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
result_folder <- paste0("KEGG_Results_", timestamp)
dir.create(result_folder)  # Create main result folder
# Function to export pathway files individually
export_pathways <- function(pathway_ids, fullnames, pathway_direction) {
pathway_folder <- file.path(result_folder, paste0("KEGG_", cell_type, pathway_direction)) # creates main folder
dir.create(pathway_folder)  # Create subfolder (increased OR decreased)
setwd(pathway_folder)
# Perform pathview and export each pathway
for (pid in pathway_ids) {
full_pathway_name <- fullnames[which(substr(fullnames, 1, 8) == pid)]
print(full_pathway_name)
tryCatch({
dir.create(full_pathway_name)
setwd(full_pathway_name)
pathview(gene.data = foldchanges, pathway.id = pid, species = 'mmu')
},
error = function(e) {
cat(paste("Error for pathway", full_pathway_name, ":", e$message, "\n"))
})
setwd("..")
}
}
if (export_pathway_files == TRUE) {
# Export downregulated pathways
setwd(original_wd)
print(downregulated_pathway_ids)
export_pathways(downregulated_pathway_ids, downregulated_pathways, "_Decreased")
# Export upregulated pathways
setwd(original_wd)
print(upregulated_pathway_ids)
export_pathways(upregulated_pathway_ids, upregulated_pathways, "_Increased")
}
# Prepare data for ridge plots
ridge_data <- function(pathway_ids, pathway_direction, cats) {
ridge_df <- data.frame()
for (pid in pathway_ids) {
genes_in_pathway <- get_gene_list(pid, 'KEGG')
log2fc_values <- foldchanges[names(foldchanges) %in% genes_in_pathway$ENTREZID]
gene_ratio <- length(log2fc_values) / nrow(genes_in_pathway)  # Calculate gene ratio
if (length(log2fc_values) > 0) {  # Check if log2fc_values is not empty
pathway_category <- unique(cats[cats$Pathway == pid, "Major"])
if (length(pathway_category) == 0) {
pathway_category <- "Unknown"
}
pathway_name <- get_kegg_pathway_name(pid)
ridge_df <- rbind(ridge_df, data.frame(pathway = rep(paste0(pathway_name, " - ", pid, "_", pathway_direction), length(log2fc_values)),
log2fc = log2fc_values,
gene_ratio = rep(gene_ratio, length(log2fc_values)),
category = rep(pathway_category, length(log2fc_values))))
}
}
return(ridge_df)
}
ridge_df_up <- ridge_data(upregulated_pathway_ids, "Upregulated", cats)
ridge_df_down <- ridge_data(downregulated_pathway_ids, "Downregulated", cats)
ridge_df <- rbind(ridge_df_up, ridge_df_down)
# Plot ridge plots with binning
if (nrow(ridge_df) > 0) {
category_colors <- c("Metabolism" = "red", "Genetic Information Processing" = "blue",
"Environmental Information Processing" = "green", "Cellular Processes" = "purple",
"Organismal Systems" = "orange", "Human Diseases" = "brown", "Unknown" = "gray")
ridge_plot <- ggplot(ridge_df, aes(x = log2fc, y = pathway, fill = gene_ratio, color = category)) +
geom_density_ridges(scale = 3, rel_min_height = 0.01) +  # Using binning
scale_fill_viridis_c(option = "plasma", limits = c(0, 1)) +  # Use plasma color palette with limits from 0 to 1
scale_color_manual(values = category_colors) +
theme_ridges() +
theme(legend.position = "right") +
labs(title = paste("Ridge Plots for", cell_type, "Pathways"),
x = "abs.log2FC",
y = "Pathways",
fill = "Gene Ratio",
color = "Category") +
scale_y_discrete(labels = function(x) sapply(strsplit(x, "_"), function(y) paste(y[2], y[1], sep = "_")))
print(ridge_plot)
} else {
cat("No data available for ridge plots.\n")
}
return(list(upregulated = upregulated_pathways, downregulated = downregulated_pathways, intersected = intersected_pathways))
}
results <- analyze_pathways(df = df_eec, cell_type = 'EEC', p_val = 0.05, export_pathway_files = FALSE, cats = cats)
analyze_pathways <- function(df, cell_type = 'Cell_Type', p_val = 0.05, export_pathway_files = TRUE, cats) {
original_wd <- getwd()
# Subset only the significantly DEGs
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
# Perform GO enrichment analysis
data("go.sets.mm")
data("go.subs.mm")
gobpsets <- go.sets.mm[go.subs.mm$BP]
gobpres <- gage(exprs = foldchanges, gsets = gobpsets, same.dir = TRUE)
# Perform KEGG pathway analysis
data("kegg.sets.mm")
data("sigmet.idx.mm")
kegg.sets.mm <- kegg.sets.mm[sigmet.idx.mm]
keggres <- gage(exprs = foldchanges, gsets = kegg.sets.mm, same.dir = TRUE)
# Extract and process upregulated KEGG pathways
upregulated_pathways <- data.frame(id = rownames(keggres$greater), keggres$greater) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
upregulated_pathway_ids <- substr(upregulated_pathways, start = 1, stop = 8)
# Extract and process downregulated KEGG pathways
downregulated_pathways <- data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
downregulated_pathway_ids <- substr(downregulated_pathways, start = 1, stop = 8)
# Find intersection of upregulated and downregulated pathways
intersected_pathways <- intersect(upregulated_pathway_ids, downregulated_pathway_ids)
if (length(intersected_pathways) > 0) {
cat("Intersection of upregulated and downregulated pathways:\n")
cat(paste(intersected_pathways, collapse = ", "), "\n")
} else {
cat("No intersection between upregulated and downregulated pathways.\n")
}
# Create timestamp for result folder
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
result_folder <- paste0("KEGG_Results_", timestamp)
dir.create(result_folder)  # Create main result folder
# Function to export pathway files individually
export_pathways <- function(pathway_ids, fullnames, pathway_direction) {
pathway_folder <- file.path(result_folder, paste0("KEGG_", cell_type, pathway_direction)) # creates main folder
dir.create(pathway_folder)  # Create subfolder (increased OR decreased)
setwd(pathway_folder)
# Perform pathview and export each pathway
for (pid in pathway_ids) {
full_pathway_name <- fullnames[which(substr(fullnames, 1, 8) == pid)]
print(full_pathway_name)
tryCatch({
dir.create(full_pathway_name)
setwd(full_pathway_name)
pathview(gene.data = foldchanges, pathway.id = pid, species = 'mmu')
},
error = function(e) {
cat(paste("Error for pathway", full_pathway_name, ":", e$message, "\n"))
})
setwd("..")
}
}
if (export_pathway_files == TRUE) {
# Export downregulated pathways
setwd(original_wd)
print(downregulated_pathway_ids)
export_pathways(downregulated_pathway_ids, downregulated_pathways, "_Decreased")
# Export upregulated pathways
setwd(original_wd)
print(upregulated_pathway_ids)
export_pathways(upregulated_pathway_ids, upregulated_pathways, "_Increased")
}
# Prepare data for ridge plots
ridge_data <- function(pathway_ids, pathway_direction, cats) {
ridge_df <- data.frame()
for (pid in pathway_ids) {
genes_in_pathway <- get_gene_list(pid, 'KEGG')
log2fc_values <- foldchanges[names(foldchanges) %in% genes_in_pathway$ENTREZID]
gene_ratio <- length(log2fc_values) / nrow(genes_in_pathway)  # Calculate gene ratio
if (length(log2fc_values) > 0) {  # Check if log2fc_values is not empty
pathway_category <- unique(cats[cats$Pathway == pid, "Major"])
if (length(pathway_category) == 0) {
pathway_category <- "Unknown"
}
pathway_name <- get_kegg_pathway_name(pid)
ridge_df <- rbind(ridge_df, data.frame(pathway = rep(paste0(pathway_name, " - ", pid), length(log2fc_values)),
log2fc = log2fc_values,
gene_ratio = rep(gene_ratio, length(log2fc_values)),
category = rep(pathway_category, length(log2fc_values))))
}
}
return(ridge_df)
}
ridge_df_up <- ridge_data(upregulated_pathway_ids, "Upregulated", cats)
ridge_df_down <- ridge_data(downregulated_pathway_ids, "Downregulated", cats)
ridge_df <- rbind(ridge_df_up, ridge_df_down)
# Plot ridge plots with binning
if (nrow(ridge_df) > 0) {
category_colors <- c("Metabolism" = "red", "Genetic Information Processing" = "blue",
"Environmental Information Processing" = "green", "Cellular Processes" = "purple",
"Organismal Systems" = "orange", "Human Diseases" = "brown", "Unknown" = "gray")
ridge_plot <- ggplot(ridge_df, aes(x = log2fc, y = pathway, fill = gene_ratio, color = category)) +
geom_density_ridges(scale = 3, rel_min_height = 0.01) +  # Using binning
scale_fill_viridis_c(option = "plasma", limits = c(0, 1)) +  # Use plasma color palette with limits from 0 to 1
scale_color_manual(values = category_colors) +
theme_ridges() +
theme(legend.position = "right") +
labs(title = paste("Ridge Plots for", cell_type, "Pathways"),
x = "abs.log2FC",
y = "Pathways",
fill = "Gene Ratio",
color = "Category") +
scale_y_discrete(labels = function(x) sapply(strsplit(x, "_"), function(y) paste(y[2], y[1], sep = "_")))
print(ridge_plot)
} else {
cat("No data available for ridge plots.\n")
}
return(list(upregulated = upregulated_pathways, downregulated = downregulated_pathways, intersected = intersected_pathways))
}
results <- analyze_pathways(df = df_eec, cell_type = 'EEC', p_val = 0.05, export_pathway_files = FALSE, cats = cats)
analyze_pathways <- function(df, cell_type = 'Cell_Type', p_val = 0.05, export_pathway_files = TRUE, cats) {
original_wd <- getwd()
# Subset only the significantly DEGs
df <- df[df$adj.P.Val <= p_val, ]
# Extract gene symbols
gene_symbols <- df$X
# Map gene symbols to Entrez IDs
gene_entrez_ids <- mapIds(org.Mm.eg.db, keys = gene_symbols, column = "ENTREZID", keytype = "SYMBOL", multiVals = "first")
gene_entrez_ids <- as.character(gene_entrez_ids)
# Prepare fold changes data
foldchanges <- df$abs.log2FC
names(foldchanges) <- gene_entrez_ids
foldchanges <- na.omit(foldchanges)
# Perform GO enrichment analysis
data("go.sets.mm")
data("go.subs.mm")
gobpsets <- go.sets.mm[go.subs.mm$BP]
gobpres <- gage(exprs = foldchanges, gsets = gobpsets, same.dir = TRUE)
# Perform KEGG pathway analysis
data("kegg.sets.mm")
data("sigmet.idx.mm")
kegg.sets.mm <- kegg.sets.mm[sigmet.idx.mm]
keggres <- gage(exprs = foldchanges, gsets = kegg.sets.mm, same.dir = TRUE)
# Extract and process upregulated KEGG pathways
upregulated_pathways <- data.frame(id = rownames(keggres$greater), keggres$greater) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
upregulated_pathway_ids <- substr(upregulated_pathways, start = 1, stop = 8)
# Extract and process downregulated KEGG pathways
downregulated_pathways <- data.frame(id = rownames(keggres$less), keggres$less) %>%
tibble::as_tibble() %>%
filter(p.val < p_val) %>%
.[['id']] %>%
as.character()
downregulated_pathway_ids <- substr(downregulated_pathways, start = 1, stop = 8)
# Find intersection of upregulated and downregulated pathways
intersected_pathways <- intersect(upregulated_pathway_ids, downregulated_pathway_ids)
if (length(intersected_pathways) > 0) {
cat("Intersection of upregulated and downregulated pathways:\n")
cat(paste(intersected_pathways, collapse = ", "), "\n")
} else {
cat("No intersection between upregulated and downregulated pathways.\n")
}
# Create timestamp for result folder
timestamp <- format(Sys.time(), "%Y%m%d_%H%M%S")
result_folder <- paste0("KEGG_Results_", timestamp)
dir.create(result_folder)  # Create main result folder
# Function to export pathway files individually
export_pathways <- function(pathway_ids, fullnames, pathway_direction) {
pathway_folder <- file.path(result_folder, paste0("KEGG_", cell_type, pathway_direction)) # creates main folder
dir.create(pathway_folder)  # Create subfolder (increased OR decreased)
setwd(pathway_folder)
# Perform pathview and export each pathway
for (pid in pathway_ids) {
full_pathway_name <- fullnames[which(substr(fullnames, 1, 8) == pid)]
print(full_pathway_name)
tryCatch({
dir.create(full_pathway_name)
setwd(full_pathway_name)
pathview(gene.data = foldchanges, pathway.id = pid, species = 'mmu')
},
error = function(e) {
cat(paste("Error for pathway", full_pathway_name, ":", e$message, "\n"))
})
setwd("..")
}
}
if (export_pathway_files == TRUE) {
# Export downregulated pathways
setwd(original_wd)
print(downregulated_pathway_ids)
export_pathways(downregulated_pathway_ids, downregulated_pathways, "_Decreased")
# Export upregulated pathways
setwd(original_wd)
print(upregulated_pathway_ids)
export_pathways(upregulated_pathway_ids, upregulated_pathways, "_Increased")
}
# Prepare data for ridge plots
ridge_data <- function(pathway_ids, pathway_direction, cats) {
ridge_df <- data.frame()
for (pid in pathway_ids) {
genes_in_pathway <- get_gene_list(pid, 'KEGG')
log2fc_values <- foldchanges[names(foldchanges) %in% genes_in_pathway$ENTREZID]
gene_ratio <- length(log2fc_values) / nrow(genes_in_pathway)  # Calculate gene ratio
if (length(log2fc_values) > 0) {  # Check if log2fc_values is not empty
pathway_category <- unique(cats[cats$Pathway == pid, "Major"])
if (length(pathway_category) == 0) {
pathway_category <- "Unknown"
}
pathway_name <- get_kegg_pathway_name(pid)
ridge_df <- rbind(ridge_df, data.frame(pathway = rep(paste0(pathway_name, " - ", pid, "_", pathway_direction), length(log2fc_values)),
log2fc = log2fc_values,
gene_ratio = rep(gene_ratio, length(log2fc_values)),
category = rep(pathway_category, length(log2fc_values))))
}
}
return(ridge_df)
}
ridge_df_up <- ridge_data(upregulated_pathway_ids, "Upregulated", cats)
ridge_df_down <- ridge_data(downregulated_pathway_ids, "Downregulated", cats)
ridge_df <- rbind(ridge_df_up, ridge_df_down)
# Plot ridge plots with binning
if (nrow(ridge_df) > 0) {
category_colors <- c("Metabolism" = "red", "Genetic Information Processing" = "blue",
"Environmental Information Processing" = "green", "Cellular Processes" = "purple",
"Organismal Systems" = "orange", "Human Diseases" = "brown", "Unknown" = "gray")
ridge_plot <- ggplot(ridge_df, aes(x = log2fc, y = pathway, fill = gene_ratio, color = category)) +
geom_density_ridges(scale = 3, rel_min_height = 0.01) +  # Using binning
scale_fill_viridis_c(option = "plasma", limits = c(0, 1)) +  # Use plasma color palette with limits from 0 to 1
scale_color_manual(values = category_colors) +
theme_ridges() +
theme(legend.position = "right") +
labs(title = paste("Ridge Plots for", cell_type, "Pathways"),
x = "abs.log2FC",
y = "Pathways",
fill = "Gene Ratio",
color = "Category") +
scale_y_discrete(labels = function(x) sapply(strsplit(x, "_"), function(y) paste(y[2], y[1], sep = "_")))
print(ridge_plot)
} else {
cat("No data available for ridge plots.\n")
}
return(list(upregulated = upregulated_pathways, downregulated = downregulated_pathways, intersected = intersected_pathways))
}
results <- analyze_pathways(df = df_eec, cell_type = 'EEC', p_val = 0.05, export_pathway_files = FALSE, cats = cats)
